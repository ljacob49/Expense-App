{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser, getNotifications } from '../selectors';\nexport const useFormState = data => {\n  _s();\n\n  const [state, setState] = useState(data);\n  const [visible, setVisible] = useState(false);\n\n  const toggleDisplay = () => setVisible(hidden => !hidden);\n\n  useEffect(() => {\n    if (data) {\n      setState(data);\n    }\n  }, []);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setState({ ...state,\n      [name]: value\n    });\n  };\n\n  const reset = () => setState(data);\n\n  return {\n    state,\n    handleChange,\n    visible,\n    toggleDisplay,\n    reset\n  };\n};\n\n_s(useFormState, \"9/2Fp5XcIkZOdfhjijvM1M+eruQ=\");\n\nexport const useVerify = () => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    authenticated: loggedIn,\n    user\n  } = useSelector(getUser);\n  const {\n    isLoading,\n    error\n  } = useSelector(getNotifications);\n  return {\n    loggedIn,\n    user,\n    isLoading,\n    error,\n    dispatch,\n    navigate\n  };\n};\n\n_s2(useVerify, \"BJe9tsYixq6g0RrYZKzG9Aiz2CA=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector];\n});","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/hooks/index.js"],"names":["useEffect","useState","useNavigate","useDispatch","useSelector","getUser","getNotifications","useFormState","data","state","setState","visible","setVisible","toggleDisplay","hidden","handleChange","e","name","value","target","reset","useVerify","dispatch","navigate","authenticated","loggedIn","user","isLoading","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,gBAAlB,QAA0C,cAA1C;AAEA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACO,IAAD,CAAlC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMY,aAAa,GAAG,MAAMD,UAAU,CAAEE,MAAD,IAAY,CAACA,MAAd,CAAtC;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAJ,EAAU;AACRE,MAAAA,QAAQ,CAACF,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMO,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AAEAT,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,OAACQ,IAAD,GAAQC;AAFD,KAAD,CAAR;AAID,GAPD;;AASA,QAAME,KAAK,GAAG,MAAMV,QAAQ,CAACF,IAAD,CAA5B;;AAEA,SAAO;AACLC,IAAAA,KADK;AAELM,IAAAA,YAFK;AAGLJ,IAAAA,OAHK;AAILE,IAAAA,aAJK;AAKLO,IAAAA;AALK,GAAP;AAOD,CA9BM;;GAAMb,Y;;AAgCb,OAAO,MAAMc,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,QAAQ,GAAGrB,WAAW,EAA5B;AAEA,QAAM;AAAEsB,IAAAA,aAAa,EAAEC,QAAjB;AAA2BC,IAAAA;AAA3B,MAAoCtB,WAAW,CAACC,OAAD,CAArD;AACA,QAAM;AAAEsB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAuBxB,WAAW,CAACE,gBAAD,CAAxC;AAEA,SAAO;AACLmB,IAAAA,QADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,SAHK;AAILC,IAAAA,KAJK;AAKLN,IAAAA,QALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAfM;;IAAMF,S;UACMlB,W,EACAD,W,EAEyBE,W,EACbA,W","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser, getNotifications } from '../selectors';\n\nexport const useFormState = (data) => {\n  const [state, setState] = useState(data);\n  const [visible, setVisible] = useState(false);\n\n  const toggleDisplay = () => setVisible((hidden) => !hidden);\n\n  useEffect(() => {\n    if (data) {\n      setState(data);\n    }\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const reset = () => setState(data);\n\n  return {\n    state,\n    handleChange,\n    visible,\n    toggleDisplay,\n    reset,\n  };\n};\n\nexport const useVerify = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { authenticated: loggedIn, user } = useSelector(getUser);\n  const { isLoading, error } = useSelector(getNotifications);\n\n  return {\n    loggedIn,\n    user,\n    isLoading,\n    error,\n    dispatch,\n    navigate,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}