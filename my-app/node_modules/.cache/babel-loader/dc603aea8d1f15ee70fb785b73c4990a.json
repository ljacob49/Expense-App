{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport createSagaMiddleware from '@redux-saga/core';\nimport user from '../slice/user';\nimport lists from '../slice/lists';\nimport reports from '../slice/reports';\nimport expenses from '../slice/expenses';\nimport notifications from '../slice/notifications';\nimport rootSaga from '../sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst store = configureStore({\n  reducer: combineReducers({\n    user,\n    lists,\n    reports,\n    expenses,\n    notifications\n  }),\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(sagaMiddleware)\n});\nexport default store;\nsagaMiddleware.run(rootSaga);","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/store/index.js"],"names":["configureStore","combineReducers","createSagaMiddleware","user","lists","reports","expenses","notifications","rootSaga","sagaMiddleware","store","reducer","middleware","getDefaultMiddleware","prepend","run"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,kBAAhD;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,MAAMQ,KAAK,GAAGV,cAAc,CAAC;AAC3BW,EAAAA,OAAO,EAAEV,eAAe,CAAC;AACvBE,IAAAA,IADuB;AAEvBC,IAAAA,KAFuB;AAGvBC,IAAAA,OAHuB;AAIvBC,IAAAA,QAJuB;AAKvBC,IAAAA;AALuB,GAAD,CADG;AAQ3BK,EAAAA,UAAU,EAAGC,oBAAD,IAA0BA,oBAAoB,GAAGC,OAAvB,CAA+BL,cAA/B;AARX,CAAD,CAA5B;AAWA,eAAeC,KAAf;AAEAD,cAAc,CAACM,GAAf,CAAmBP,QAAnB","sourcesContent":["import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport createSagaMiddleware from '@redux-saga/core';\nimport user from '../slice/user';\nimport lists from '../slice/lists';\nimport reports from '../slice/reports';\nimport expenses from '../slice/expenses';\nimport notifications from '../slice/notifications';\nimport rootSaga from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: combineReducers({\n    user,\n    lists,\n    reports,\n    expenses,\n    notifications,\n  }),\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(sagaMiddleware),\n});\n\nexport default store;\n\nsagaMiddleware.run(rootSaga);\n"]},"metadata":{},"sourceType":"module"}