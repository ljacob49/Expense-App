{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { SIGN_UP, LOG_IN, AUTHENTICATE_USER, EDIT_USER, SIGN_OUT, CREATE_LIST, UPDATE_LIST, DELETE_LIST, FETCH_EXPENSES, CREATE_EXPENSE, UPDATE_EXPENSE, DELETE_EXPENSE, FETCH_REPORT, REQUEST_FAILED, CLEAR_NOTIFICATIONS } from '../constants';\nexport const signUpRequest = createAction(SIGN_UP, data => ({\n  payload: {\n    user: data\n  }\n}));\nexport const logInRequest = createAction(LOG_IN, data => ({\n  payload: data\n}));\nexport const authUser = createAction(AUTHENTICATE_USER, data => ({\n  payload: data\n}));\nexport const editUserRequest = createAction(EDIT_USER, (id, data) => ({\n  payload: {\n    id,\n    data\n  }\n}));\nexport const signOutRequest = createAction(SIGN_OUT);\nexport const clearNotifications = createAction(CLEAR_NOTIFICATIONS);\nexport const fetchReport = createAction(FETCH_REPORT, id => ({\n  payload: id\n}));\nexport const createList = createAction(CREATE_LIST, (id, data) => ({\n  payload: {\n    id,\n    data\n  }\n}));\nexport const updateList = createAction(UPDATE_LIST, (id, data) => ({\n  payload: {\n    id,\n    data\n  }\n}));\nexport const deleteList = createAction(DELETE_LIST, id => ({\n  payload: id\n}));\nexport const fetchExpenses = createAction(FETCH_EXPENSES, id => ({\n  payload: id\n}));\nexport const createExpense = createAction(CREATE_EXPENSE, (id, data) => ({\n  payload: {\n    id,\n    data\n  }\n}));\nexport const updateExpense = createAction(UPDATE_EXPENSE, (id, data) => ({\n  payload: {\n    id,\n    data\n  }\n}));\nexport const deleteExpense = createAction(DELETE_EXPENSE, id => ({\n  payload: id\n}));\nexport const requestFailed = createAction(REQUEST_FAILED, message => ({\n  payload: message\n}));","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/actions/index.js"],"names":["createAction","SIGN_UP","LOG_IN","AUTHENTICATE_USER","EDIT_USER","SIGN_OUT","CREATE_LIST","UPDATE_LIST","DELETE_LIST","FETCH_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","FETCH_REPORT","REQUEST_FAILED","CLEAR_NOTIFICATIONS","signUpRequest","data","payload","user","logInRequest","authUser","editUserRequest","id","signOutRequest","clearNotifications","fetchReport","createList","updateList","deleteList","fetchExpenses","createExpense","updateExpense","deleteExpense","requestFailed","message"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SACEC,OADF,EACWC,MADX,EACmBC,iBADnB,EACsCC,SADtC,EACiDC,QADjD,EAEEC,WAFF,EAEeC,WAFf,EAE4BC,WAF5B,EAEyCC,cAFzC,EAGEC,cAHF,EAGkBC,cAHlB,EAGkCC,cAHlC,EAIEC,YAJF,EAIgBC,cAJhB,EAIgCC,mBAJhC,QAKO,cALP;AAOA,OAAO,MAAMC,aAAa,GAAGhB,YAAY,CAACC,OAAD,EAAWgB,IAAD,KAAW;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAI,EAAEF;AAAR;AAAX,CAAX,CAAV,CAAlC;AAEP,OAAO,MAAMG,YAAY,GAAGpB,YAAY,CAACE,MAAD,EAAUe,IAAD,KAAW;AAAEC,EAAAA,OAAO,EAAED;AAAX,CAAX,CAAT,CAAjC;AAEP,OAAO,MAAMI,QAAQ,GAAGrB,YAAY,CAACG,iBAAD,EAAqBc,IAAD,KAAW;AAAEC,EAAAA,OAAO,EAAED;AAAX,CAAX,CAApB,CAA7B;AAEP,OAAO,MAAMK,eAAe,GAAGtB,YAAY,CAACI,SAAD,EAAY,CAACmB,EAAD,EAAKN,IAAL,MACrD;AACEC,EAAAA,OAAO,EAAE;AACPK,IAAAA,EADO;AAEPN,IAAAA;AAFO;AADX,CADqD,CAAZ,CAApC;AASP,OAAO,MAAMO,cAAc,GAAGxB,YAAY,CAACK,QAAD,CAAnC;AAEP,OAAO,MAAMoB,kBAAkB,GAAGzB,YAAY,CAACe,mBAAD,CAAvC;AAEP,OAAO,MAAMW,WAAW,GAAG1B,YAAY,CAACa,YAAD,EAAgBU,EAAD,KAAS;AAAEL,EAAAA,OAAO,EAAEK;AAAX,CAAT,CAAf,CAAhC;AAEP,OAAO,MAAMI,UAAU,GAAG3B,YAAY,CAACM,WAAD,EAAc,CAACiB,EAAD,EAAKN,IAAL,MAClD;AACEC,EAAAA,OAAO,EAAE;AACPK,IAAAA,EADO;AAEPN,IAAAA;AAFO;AADX,CADkD,CAAd,CAA/B;AASP,OAAO,MAAMW,UAAU,GAAG5B,YAAY,CAACO,WAAD,EAAc,CAACgB,EAAD,EAAKN,IAAL,MAClD;AACEC,EAAAA,OAAO,EAAE;AACPK,IAAAA,EADO;AAEPN,IAAAA;AAFO;AADX,CADkD,CAAd,CAA/B;AASP,OAAO,MAAMY,UAAU,GAAG7B,YAAY,CAACQ,WAAD,EAAee,EAAD,KAAS;AAAEL,EAAAA,OAAO,EAAEK;AAAX,CAAT,CAAd,CAA/B;AAEP,OAAO,MAAMO,aAAa,GAAG9B,YAAY,CAACS,cAAD,EAAkBc,EAAD,KAAS;AAAEL,EAAAA,OAAO,EAAEK;AAAX,CAAT,CAAjB,CAAlC;AAEP,OAAO,MAAMQ,aAAa,GAAG/B,YAAY,CAACU,cAAD,EAAiB,CAACa,EAAD,EAAKN,IAAL,MACxD;AACEC,EAAAA,OAAO,EAAE;AACPK,IAAAA,EADO;AAEPN,IAAAA;AAFO;AADX,CADwD,CAAjB,CAAlC;AASP,OAAO,MAAMe,aAAa,GAAGhC,YAAY,CAACW,cAAD,EAAiB,CAACY,EAAD,EAAKN,IAAL,MACxD;AACEC,EAAAA,OAAO,EAAE;AACPK,IAAAA,EADO;AAEPN,IAAAA;AAFO;AADX,CADwD,CAAjB,CAAlC;AASP,OAAO,MAAMgB,aAAa,GAAGjC,YAAY,CAACY,cAAD,EAAkBW,EAAD,KAAS;AAAEL,EAAAA,OAAO,EAAEK;AAAX,CAAT,CAAjB,CAAlC;AAEP,OAAO,MAAMW,aAAa,GAAGlC,YAAY,CAACc,cAAD,EAAkBqB,OAAD,KAAc;AAAEjB,EAAAA,OAAO,EAAEiB;AAAX,CAAd,CAAjB,CAAlC","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport {\n  SIGN_UP, LOG_IN, AUTHENTICATE_USER, EDIT_USER, SIGN_OUT,\n  CREATE_LIST, UPDATE_LIST, DELETE_LIST, FETCH_EXPENSES,\n  CREATE_EXPENSE, UPDATE_EXPENSE, DELETE_EXPENSE,\n  FETCH_REPORT, REQUEST_FAILED, CLEAR_NOTIFICATIONS,\n} from '../constants';\n\nexport const signUpRequest = createAction(SIGN_UP, (data) => ({ payload: { user: data } }));\n\nexport const logInRequest = createAction(LOG_IN, (data) => ({ payload: data }));\n\nexport const authUser = createAction(AUTHENTICATE_USER, (data) => ({ payload: data }));\n\nexport const editUserRequest = createAction(EDIT_USER, (id, data) => (\n  {\n    payload: {\n      id,\n      data,\n    },\n  }\n));\n\nexport const signOutRequest = createAction(SIGN_OUT);\n\nexport const clearNotifications = createAction(CLEAR_NOTIFICATIONS);\n\nexport const fetchReport = createAction(FETCH_REPORT, (id) => ({ payload: id }));\n\nexport const createList = createAction(CREATE_LIST, (id, data) => (\n  {\n    payload: {\n      id,\n      data,\n    },\n  }\n));\n\nexport const updateList = createAction(UPDATE_LIST, (id, data) => (\n  {\n    payload: {\n      id,\n      data,\n    },\n  }\n));\n\nexport const deleteList = createAction(DELETE_LIST, (id) => ({ payload: id }));\n\nexport const fetchExpenses = createAction(FETCH_EXPENSES, (id) => ({ payload: id }));\n\nexport const createExpense = createAction(CREATE_EXPENSE, (id, data) => (\n  {\n    payload: {\n      id,\n      data,\n    },\n  }\n));\n\nexport const updateExpense = createAction(UPDATE_EXPENSE, (id, data) => (\n  {\n    payload: {\n      id,\n      data,\n    },\n  }\n));\n\nexport const deleteExpense = createAction(DELETE_EXPENSE, (id) => ({ payload: id }));\n\nexport const requestFailed = createAction(REQUEST_FAILED, (message) => ({ payload: message }));\n"]},"metadata":{},"sourceType":"module"}