{"ast":null,"code":"import { runSaga } from 'redux-saga';\nimport { takeEvery, takeLatest } from '@redux-saga/core/effects';\nimport { signUp, signIn, editAccount, signOut } from './accountSagas';\nimport fetchReports from './reportSaga';\nimport { createList, updateList, deleteList } from './listSagas';\nimport { fetchExpenses, createExpense, updateExpense, deleteExpense } from './expenseSagas';\nimport { SIGN_UP, LOG_IN, EDIT_USER, AUTHENTICATE_USER, CREATE_LIST, UPDATE_LIST, DELETE_LIST, FETCH_EXPENSES, CREATE_EXPENSE, UPDATE_EXPENSE, DELETE_EXPENSE, SIGN_OUT } from '../constants';\nexport default function* rootSaga() {\n  yield takeEvery(SIGN_UP, signUp);\n  yield takeEvery(LOG_IN, signIn);\n  yield takeLatest(AUTHENTICATE_USER, fetchReports);\n  yield takeLatest(EDIT_USER, editAccount);\n  yield takeLatest(SIGN_OUT, signOut);\n  yield takeEvery(CREATE_LIST, createList);\n  yield takeEvery(UPDATE_LIST, updateList);\n  yield takeLatest(DELETE_LIST, deleteList);\n  yield takeLatest(FETCH_EXPENSES, fetchExpenses);\n  yield takeEvery(CREATE_EXPENSE, createExpense);\n  yield takeEvery(UPDATE_EXPENSE, updateExpense);\n  yield takeLatest(DELETE_EXPENSE, deleteExpense);\n}\nexport const recordSaga = async (saga, initialAction) => {\n  const dispatched = [];\n  await runSaga({\n    dispatch: action => dispatched.push(action)\n  }, saga, initialAction).done;\n  return dispatched;\n};","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/sagas/index.js"],"names":["runSaga","takeEvery","takeLatest","signUp","signIn","editAccount","signOut","fetchReports","createList","updateList","deleteList","fetchExpenses","createExpense","updateExpense","deleteExpense","SIGN_UP","LOG_IN","EDIT_USER","AUTHENTICATE_USER","CREATE_LIST","UPDATE_LIST","DELETE_LIST","FETCH_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","SIGN_OUT","rootSaga","recordSaga","saga","initialAction","dispatched","dispatch","action","push","done"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,0BAAtC;AACA,SACEC,MADF,EACUC,MADV,EACkBC,WADlB,EAC+BC,OAD/B,QAEO,gBAFP;AAGA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,aAAnD;AACA,SACEC,aADF,EACiBC,aADjB,EACgCC,aADhC,EAC+CC,aAD/C,QAEO,gBAFP;AAGA,SACEC,OADF,EACWC,MADX,EACmBC,SADnB,EAC8BC,iBAD9B,EAEEC,WAFF,EAEeC,WAFf,EAE4BC,WAF5B,EAGEC,cAHF,EAGkBC,cAHlB,EAGkCC,cAHlC,EAGkDC,cAHlD,EAIEC,QAJF,QAKO,cALP;AAOA,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAM1B,SAAS,CAACc,OAAD,EAAUZ,MAAV,CAAf;AACA,QAAMF,SAAS,CAACe,MAAD,EAASZ,MAAT,CAAf;AACA,QAAMF,UAAU,CAACgB,iBAAD,EAAoBX,YAApB,CAAhB;AACA,QAAML,UAAU,CAACe,SAAD,EAAYZ,WAAZ,CAAhB;AACA,QAAMH,UAAU,CAACwB,QAAD,EAAWpB,OAAX,CAAhB;AACA,QAAML,SAAS,CAACkB,WAAD,EAAcX,UAAd,CAAf;AACA,QAAMP,SAAS,CAACmB,WAAD,EAAcX,UAAd,CAAf;AACA,QAAMP,UAAU,CAACmB,WAAD,EAAcX,UAAd,CAAhB;AACA,QAAMR,UAAU,CAACoB,cAAD,EAAiBX,aAAjB,CAAhB;AACA,QAAMV,SAAS,CAACsB,cAAD,EAAiBX,aAAjB,CAAf;AACA,QAAMX,SAAS,CAACuB,cAAD,EAAiBX,aAAjB,CAAf;AACA,QAAMX,UAAU,CAACuB,cAAD,EAAiBX,aAAjB,CAAhB;AACD;AAED,OAAO,MAAMc,UAAU,GAAG,OAAOC,IAAP,EAAaC,aAAb,KAA+B;AACvD,QAAMC,UAAU,GAAG,EAAnB;AAEA,QAAM/B,OAAO,CACX;AACEgC,IAAAA,QAAQ,EAAGC,MAAD,IAAYF,UAAU,CAACG,IAAX,CAAgBD,MAAhB;AADxB,GADW,EAIXJ,IAJW,EAKXC,aALW,CAAP,CAMJK,IANF;AAQA,SAAOJ,UAAP;AACD,CAZM","sourcesContent":["import { runSaga } from 'redux-saga';\nimport { takeEvery, takeLatest } from '@redux-saga/core/effects';\nimport {\n  signUp, signIn, editAccount, signOut,\n} from './accountSagas';\nimport fetchReports from './reportSaga';\nimport { createList, updateList, deleteList } from './listSagas';\nimport {\n  fetchExpenses, createExpense, updateExpense, deleteExpense,\n} from './expenseSagas';\nimport {\n  SIGN_UP, LOG_IN, EDIT_USER, AUTHENTICATE_USER,\n  CREATE_LIST, UPDATE_LIST, DELETE_LIST,\n  FETCH_EXPENSES, CREATE_EXPENSE, UPDATE_EXPENSE, DELETE_EXPENSE,\n  SIGN_OUT,\n} from '../constants';\n\nexport default function* rootSaga() {\n  yield takeEvery(SIGN_UP, signUp);\n  yield takeEvery(LOG_IN, signIn);\n  yield takeLatest(AUTHENTICATE_USER, fetchReports);\n  yield takeLatest(EDIT_USER, editAccount);\n  yield takeLatest(SIGN_OUT, signOut);\n  yield takeEvery(CREATE_LIST, createList);\n  yield takeEvery(UPDATE_LIST, updateList);\n  yield takeLatest(DELETE_LIST, deleteList);\n  yield takeLatest(FETCH_EXPENSES, fetchExpenses);\n  yield takeEvery(CREATE_EXPENSE, createExpense);\n  yield takeEvery(UPDATE_EXPENSE, updateExpense);\n  yield takeLatest(DELETE_EXPENSE, deleteExpense);\n}\n\nexport const recordSaga = async (saga, initialAction) => {\n  const dispatched = [];\n\n  await runSaga(\n    {\n      dispatch: (action) => dispatched.push(action),\n    },\n    saga,\n    initialAction,\n  ).done;\n\n  return dispatched;\n};\n"]},"metadata":{},"sourceType":"module"}