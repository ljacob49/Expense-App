{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst expenseSlice = createSlice({\n  name: 'expenses',\n  initialState: [],\n  reducers: {\n    fetchExpensesSucceeded: (state, action) => action.payload,\n    createExpenseSucceeded: (state, action) => {\n      state.push(action.payload);\n    },\n    updateExpenseSucceeded: (state, action) => state.map(expense => expense.id === action.payload.id ? { ...expense,\n      ...action.payload\n    } : expense),\n    deleteExpenseSucceeded: (state, action) => state.filter(expense => expense.id !== action.payload)\n  }\n});\nexport const {\n  fetchExpensesSucceeded,\n  createExpenseSucceeded,\n  updateExpenseSucceeded,\n  deleteExpenseSucceeded\n} = expenseSlice.actions;\nexport default expenseSlice.reducer;","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/slice/expenses.js"],"names":["createSlice","expenseSlice","name","initialState","reducers","fetchExpensesSucceeded","state","action","payload","createExpenseSucceeded","push","updateExpenseSucceeded","map","expense","id","deleteExpenseSucceeded","filter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAGD,WAAW,CAAC;AAC/BE,EAAAA,IAAI,EAAE,UADyB;AAE/BC,EAAAA,YAAY,EAAE,EAFiB;AAG/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,sBAAsB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OAD1C;AAERC,IAAAA,sBAAsB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACI,IAAN,CAAWH,MAAM,CAACC,OAAlB;AACD,KAJO;AAKRG,IAAAA,sBAAsB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAC7CM,GADwC,CACnCC,OAAD,IACHA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACC,OAAP,CAAeM,EAA9B,GACI,EAAE,GAAGD,OAAL;AAAc,SAAGN,MAAM,CAACC;AAAxB,KADJ,GAEIK,OAJmC,CALnC;AAWRE,IAAAA,sBAAsB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAC7CU,MADwC,CAChCH,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACC,OADF;AAXnC;AAHqB,CAAD,CAAhC;AAmBA,OAAO,MAAM;AACXH,EAAAA,sBADW;AAEXI,EAAAA,sBAFW;AAGXE,EAAAA,sBAHW;AAIXI,EAAAA;AAJW,IAKTd,YAAY,CAACgB,OALV;AAOP,eAAehB,YAAY,CAACiB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst expenseSlice = createSlice({\n  name: 'expenses',\n  initialState: [],\n  reducers: {\n    fetchExpensesSucceeded: (state, action) => action.payload,\n    createExpenseSucceeded: (state, action) => {\n      state.push(action.payload);\n    },\n    updateExpenseSucceeded: (state, action) => state\n      .map((expense) => (\n        expense.id === action.payload.id\n          ? { ...expense, ...action.payload }\n          : expense\n      )),\n    deleteExpenseSucceeded: (state, action) => state\n      .filter((expense) => expense.id !== action.payload),\n  },\n});\n\nexport const {\n  fetchExpensesSucceeded,\n  createExpenseSucceeded,\n  updateExpenseSucceeded,\n  deleteExpenseSucceeded,\n} = expenseSlice.actions;\n\nexport default expenseSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}