{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst ListSlice = createSlice({\n  name: 'lists',\n  initialState: [],\n  reducers: {\n    fetchListsSucceeded: (state, action) => action.payload,\n    createListSucceeded: (state, action) => {\n      state.push(action.payload);\n    },\n    updateListSucceeded: (state, action) => state.map(list => list.id === action.payload.id ? { ...list,\n      ...action.payload\n    } : list),\n    deleteListSucceeded: (state, action) => state.filter(list => list.id !== action.payload)\n  }\n});\nexport const {\n  fetchListsSucceeded,\n  createListSucceeded,\n  updateListSucceeded,\n  deleteListSucceeded\n} = ListSlice.actions;\nexport default ListSlice.reducer;","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/my-app/src/slice/lists.js"],"names":["createSlice","ListSlice","name","initialState","reducers","fetchListsSucceeded","state","action","payload","createListSucceeded","push","updateListSucceeded","map","list","id","deleteListSucceeded","filter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OADvC;AAERC,IAAAA,mBAAmB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACI,IAAN,CAAWH,MAAM,CAACC,OAAlB;AACD,KAJO;AAKRG,IAAAA,mBAAmB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACM,GAAN,CAAWC,IAAD,IAChDA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAP,CAAeM,EAA3B,GACI,EAAE,GAAGD,IAAL;AAAW,SAAGN,MAAM,CAACC;AAArB,KADJ,GAEIK,IAHkC,CALhC;AAURE,IAAAA,mBAAmB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACU,MAAN,CAAcH,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAA1C;AAVhC;AAHkB,CAAD,CAA7B;AAiBA,OAAO,MAAM;AACXH,EAAAA,mBADW;AAEXI,EAAAA,mBAFW;AAGXE,EAAAA,mBAHW;AAIXI,EAAAA;AAJW,IAKTd,SAAS,CAACgB,OALP;AAOP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst ListSlice = createSlice({\n  name: 'lists',\n  initialState: [],\n  reducers: {\n    fetchListsSucceeded: (state, action) => action.payload,\n    createListSucceeded: (state, action) => {\n      state.push(action.payload);\n    },\n    updateListSucceeded: (state, action) => state.map((list) => (\n      list.id === action.payload.id\n        ? { ...list, ...action.payload }\n        : list\n    )),\n    deleteListSucceeded: (state, action) => state.filter((list) => list.id !== action.payload),\n  },\n});\n\nexport const {\n  fetchListsSucceeded,\n  createListSucceeded,\n  updateListSucceeded,\n  deleteListSucceeded,\n} = ListSlice.actions;\n\nexport default ListSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}